*BASIC
NEW
AUTO
REM>EcoXfrBas
:
OSWORD=&FFF1
OSBYTE=&FFF4
OSFILE=&FFDD
OSGBPB=&FFD1
OSFIND=&FFCE
OSASCI=&FFE3
OSNEWL=&FFE7
OSWRCH=&FFEE
:
OP_FILEINFO=&01
OP_BLKREQ=&81
OP_BLKSND=&02
:
txinterval%=50
txmaxtries%=10
rxtimeout%=500
maxxfr%=256:REM in single packet
sndbuflen%=maxxfr%+13:REM +13 for OSGBPB param block
rcvbuflen%=9:REM always 9 bytes for BLKREQ
srv_port%=77
cli_port%=78
:
REM Econet cblock for tx/rx
REM sndbuffer% for snd->rcv
REM rcvbuffer% for rcv->snd
REM used on both (e.g. rcv
REM receives from snd into
REM sndbuffer%)
DIM txcblock% 12,rxcblock% 12,sndbuffer% sndbuflen%,rcvbuffer% rcvbuflen%
:
REPEAT
INPUT "T(ransmit), R(eceive) or P(kttest)? " dir$
UNTIL INSTR("TRP",dir$)<>0
:
IF dir$="P" THEN PROCpkttest
:
REPEAT
INPUT "Remote station (0=any)? " station%
UNTIL station%>=0 AND station%<=254
:
IF dir$="T" THEN PROCtransmit
IF dir$="R" THEN PROCreceive
PRINT "Done"
END
:
DEFPROCtransmit
LOCAL filenamelen%,result%
INPUT "Filename? " filename$
IF 18+LEN(filename$)+1>=sndbuflen% THEN PRINT "Filename too long":STOP
:
$(sndbuffer%+18)=filename$
!sndbuffer%=sndbuffer%+18
A%=5
X%=sndbuffer% MOD 256
Y%=sndbuffer% DIV 256
result%=USR(OSFILE) AND &FF
IF result%<>1 THEN PRINT "File error":STOP
len%=sndbuffer%!10
PRINT filename$;" ";~sndbuffer%!2;" ";~sndbuffer%!6;" ";~len%
:
?sndbuffer%=OP_FILEINFO
sndbuffer%?1=cli_port%
result%=FNtx(station%,srv_port%,sndbuffer%,18+LEN(filename$)+1)
IF result%<>0 THEN PRINT FNneterror(result%):STOP
:
A%=&40:REM =OPENIN
X%=(sndbuffer%+18) MOD 256
Y%=(sndbuffer%+18) DIV 256
fh%=USR(OSFIND) AND &FF
IF fh%=0 THEN PRINT "Error opening file":STOP
:
currpos%=0
REPEAT
REPEAT
bytes%=FNrx(station%,cli_port%,rcvbuffer%,9)
IF bytes%<>9 THEN PRINT "Illegal next block":STOP
IF ?rcvbuffer%<>OP_BLKREQ THEN PRINT "Unexpected operation &";~?rcvbuffer%;" - expected BLKREQ":STOP
UNTIL ?rcvbuffer%=OP_BLKREQ
VDU 13
PRINT ;~rcvbuffer%!1;
IF rcvbuffer%!1<>currpos% THEN PRINT "Error - we're expecting &";~currpos%:STOP
:
filebytes%=FNmin(maxxfr%,len%-currpos%)
?sndbuffer%=fh%
sndbuffer%!1=sndbuffer%+13
filebytes%=FNmin(maxxfr%,len%-currpos%)
sndbuffer%!5=filebytes%
A%=4:REM read at curr pos
X%=sndbuffer% MOD 256
Y%=sndbuffer% DIV 256
IF (USR(OSGBPB) AND &1000000)<>0 THEN PRINT "Error reading file":STOP
:
sndbuffer%?8=OP_BLKSND
sndbuffer%!9=currpos%
result%=FNtx(station%,srv_port%,sndbuffer%+8,filebytes%+5)
IF result%<>0 THEN PRINT FNneterror(result%):STOP
currpos%=currpos%+filebytes%
UNTIL currpos%>=len%
:
VDU 13
PRINT ;~currpos%
:
A%=0:REM =CLOSE
Y%=fh%
CALL OSFIND
ENDPROC
:
DEFPROCreceive
LOCAL bytes%
REPEAT
PRINT "Waiting for TX start..."
bytes%=FNrx(station%,srv_port%,sndbuffer%,sndbuflen%)
IF bytes%<0 THEN PRINT "Nothing received"
UNTIL bytes%>=0
IF bytes%<20 THEN PRINT "Illegal info block (too small)":STOP
IF ?sndbuffer%<>OP_FILEINFO THEN PRINT "Unexpected operation &";~?sndbuffer%;" - expected FILEINFO":STOP
:
station%=rxcblock%!3 AND &FFFF
port%=sndbuffer%?1
name$=$(sndbuffer%+18)
len%=sndbuffer%!10
PRINT FNstation(station%);":";port%;" ";name$;" ";~sndbuffer%!2;" ";~sndbuffer%!6;" ";~len%
:
REM *SAVE 0 length file with
REM required load/exec
:
REM pointer to filename
sndbuffer%?0=(sndbuffer%+18) MOD 256
sndbuffer%?1=(sndbuffer%+18) DIV 256
sndbuffer%!10=0:REM block start
sndbuffer%!14=0:REM block end
A%=0:REM *SAVE
X%=sndbuffer% MOD 256
Y%=sndbuffer% DIV 256
CALL OSFILE
:
A%=&C0:REM =append
X%=sndbuffer%?0
Y%=sndbuffer%?1
fh%=USR(OSFIND) AND &FF
IF fh%=0 THEN PRINT "Error opening file":STOP
:
currpos%=0
REPEAT
VDU 13
PRINT ;~currpos%;
?rcvbuffer%=OP_BLKREQ
rcvbuffer%!1=currpos%
rcvbuffer%!5=maxxfr%
result%=FNtx(station%,port%,rcvbuffer%,9)
IF result%<>0 THEN PRINT FNneterror(result%):STOP
:
bytes%=FNrx(station%,srv_port%,sndbuffer%+8,maxxfr%+5)
IF sndbuffer%?8<>OP_BLKSND THEN PRINT "Unexpected operation &";~sndbuffer%?8;" - expected BLKSND":STOP
IF sndbuffer%!9<>currpos% THEN PRINT "Incorrect position &";~sndbuffer%!9;" - expected &";~currpos%:STOP
IF bytes%-5>len%-currpos% THEN PRINT "Oversize block":STOP
:
?sndbuffer%=fh%
sndbuffer%!1=sndbuffer%+13
sndbuffer%!5=bytes%-5
A%=2:REM append
X%=sndbuffer% MOD 256
Y%=sndbuffer% DIV 256
IF (USR(OSGBPB) AND &1000000)<>0 THEN PRINT "Error writing file":STOP
:
currpos%=currpos%+bytes%-5
UNTIL currpos%>=len%
VDU 13
PRINT ;~currpos%
:
A%=0:REM =CLOSE
Y%=fh%
CALL OSFIND
ENDPROC
:
DEFFNtx(station%,port%,buffer%,len%)
REM PRINT "TX ";FNstation(station%);":";port%;" @ &";~buffer%;"+";~len%
LOCAL tries%,result%,success%,nonfatal%
tries%=0
REM loop until success or
REM retries exhausted
REPEAT
PROCtx_start(station%,port%,buffer%,len%)
REPEAT
result%=FNtx_poll
UNTIL (result% AND &80)=0
success%=(result%=0)
nonfatal%=(result%=&41 OR result%=&42)
IF (NOT success%) AND nonfatal% AND (tries%<=txmaxtries%) THEN PRINT "W";:tries%=tries%+1:PROCdelay(txinterval%)
UNTIL success% OR (NOT nonfatal%) OR (tries%>=txmaxtries%)
=result%
:
DEFPROCtx_start(station%,port%,buffer%,len%)
REM PRINT "TX ";FNstation(station%);":";port%;" @ &";~buffer%;"+";~len%
LOCAL A%,X%,Y%
REM set up control block
txcblock%?1=port%
txcblock%!2=station%
txcblock%!4=buffer%
txcblock%!8=buffer%+len%
REM start transmission
A%=&10:REM transmit
X%=txcblock%
Y%=txcblock% DIV 256
REM loop until started
REPEAT
?txcblock%=&80
CALL OSWORD
UNTIL ?txcblock%<>0
ENDPROC
:
DEFFNtx_poll
REM poll for completion
A%=&32:REM poll transmit
=(USR(OSBYTE) AND &FF00) DIV &100
:
DEFFNrx(station%,port%,buffer%,maxlen%)
LOCAL bytes%
REM PRINT "RX ";FNstation(station%);":";port%;" @ &";~buffer%;"+";~maxlen%
PROCrx_start(station%,port%,buffer%,maxlen%)
REPEAT
bytes%=FNrx_poll
UNTIL bytes%>=-1:REM -2 waiting
=bytes%
:
DEFPROCrx_start(station%,port%,buffer%,maxlen%)
LOCAL A%,X%,Y%
REM set up control block
?rxcblock%=0:REM for cblock num
rxcblock%?1=&7F
rxcblock%?2=port%
rxcblock%!3=station%
rxcblock%!5=buffer%
rxcblock%!9=buffer%+maxlen%
REM listen
A%=&11:REM receive
X%=rxcblock%
Y%=rxcblock% DIV 256
CALL OSWORD
rxexpire%=TIME+rxtimeout%
ENDPROC
:
DEFFNrx_poll
LOCAL A%,X%,result%
REM poll for reception
A%=&33:REM poll receive
X%=?rxcblock%
result%=(USR(OSBYTE) AND &8000)
IF result%=0 AND TIME<rxexpire% THEN =-2
IF result%=0 THEN PRINT "Timed out waiting":A%=&34:X%=?rxcblock%:CALL OSBYTE:=-1
:
A%=&11:REM receive
X%=rxcblock%
Y%=rxcblock% DIV 256
REM ?rxcblock% populated above
CALL OSWORD
=rxcblock%!9-rxcblock%!5
:
DEFPROCdelay(n%)
REM delay n% cs
LOCAL limit%
limit%=TIME+n%
REPEAT UNTIL TIME>=limit%
ENDPROC
:
DEFFNmin(a,b)
IF a<=b THEN =a ELSE =b
:
DEFFNstation(station%)
LOCAL s$
s$=""
IF (station% DIV 256)<>0 THEN s$=STR$(station% DIV 256)+"."
=s$+STR$(station% MOD 256)
:
DEFFNneterror(err%)
IF err%=&40 THEN ="Line jammed"
IF err%=&41 THEN ="Net error"
IF err%=&42 THEN ="Not listening"
IF err%=&43 THEN ="No clock"
IF err%=&44 THEN ="Bad control block"
="ERR#"+STR$~err%
:
DEFPROCpkttest
LOCAL station%,key$
PRINT "PACKET TEST"
REPEAT
INPUT "Remote station? "station%
UNTIL station%>1 AND station%<255
:
REPEAT
PRINT "T(ransmit) or R(eceive): ";
REPEAT
key$=GET$
valid%=INSTR("TR",key$)<>0
IF NOT valid% THEN VDU 7
UNTIL valid%
PRINT key$
IF key$="T" THEN PROCtxtest(station%)
IF key$="R" THEN PROCrxtest(station%)
UNTIL FALSE
ENDPROC
:
DEFPROCtxtest(station%)
LOCAL result%
$(txbuffer%)="to:"+STR$(station%)
result%=FNtx(station%,port%+1,txbuffer%,LEN($(txbuffer%))+1)
PRINT "Result=&";~result%
ENDPROC
:
DEFPROCrxtest(station%)
LOCAL bytes%
bytes%=FNrx(station%,port%+1,rxbuffer%,rcvbuflen%)
PRINT "Bytes=";bytes%
IF bytes%<>-1 THEN PRINT "Received:<";$(rxbuffer%);">"
ENDPROC
