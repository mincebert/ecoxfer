*HIBASIC
NEW
AUTO
REM > EcoXfrAsm
REM Robert Franklin <rcf@mince.net>
VERSION$="1.01 (2022-03-05)"
:
OSWORD=&FFF1
OSBYTE=&FFF4
OSFILE=&FFDD
OSARGS=&FFDA
OSGBPB=&FFD1
OSFIND=&FFCE
OSASCI=&FFE3
OSNEWL=&FFE7
OSWRCH=&FFEE
:
REM transfer directions
DIR_SND=&01
DIR_RCV=&02
:
REM packet types
OP_FILEINFO=&01
OP_BLKREQ=&81
OP_BLKSND=&02
:
REM econet ports
SRV_PORT=77
CLI_PORT=78
:
SCRATCH=&A8:REM use *cmd workspace
STACK=&100
TXTIMEOUT=500:REM in cs
RXTIMEOUT=500
MAXFNAMELEN=128:REM inc. CR
:
codebuf%=&1000
DIM code% codebuf%
target%=&2200
:
maxxfr=256:REM in single packet
buflen=maxxfr+13:REM +13 for OSGBPB param block
:
PROCassemble
END
:
DEFPROCassemble
LOCAL opt%
FOR opt%=4 TO 6 STEP 2
P%=target%
O%=code%
[ OPT opt%
.start
\ --- PARSE COMMAND LINE ---
:
LDA #1 \ =return cmdline addr
LDY #0 \ =part of above
LDX #SCRATCH \ =addr in zp
JSR OSARGS
:
\ initialise direction to send
LDA #DIR_SND
STA dir
:
\ blank peer station id
LDX #0
STX peer
STX peer+1
:
\ skip leading spaces
LDY #&FF
.loop
INY
LDA (SCRATCH),Y
CMP #ASC" "
BEQ loop
:
CMP #ASC"*"
BEQ anyrecv
:
CMP #13 \ =CR
BNE parsestation
\ no parameters - print help
LDY #0
.loop
LDA helpmsg,Y
CMP #0
BEQ helpend
JSR OSASCI
INY
JMP loop
.helpend
RTS
:
.anyrecv
\ peer station=* - move on to
\ receive filename
INY
JMP parsefname
:
.parsestation
\ parse station/network number
JSR parsedec
BCS parsefname \ => no number
BVS badstn \ => outside 0-255
STA peer \ assume .stn
:
\ check if "." => net.stn
LDA (SCRATCH),Y
CMP #ASC"."
BNE parsefname
\ number was actually network
LDA peer \ .stn
STA peer+1 \ net.
INY
\ get the station number
JSR parsedec
BCS badstn \ must have number
BVS badstn
STA peer \ .stn
:
.parsefname
\ skip spaces
DEY
.loop
INY
LDA (SCRATCH),Y
CMP #ASC" "
BEQ loop
:
\ if first char of filename is
\ "=" then receving and renaming
LDA (SCRATCH),Y
CMP #ASC"="
BNE copyfname
INY
LDA #DIR_RCV
STA dir
:
.copyfname
\ copy filename
LDX #0
.loop
CPX #MAXFNAMELEN \ inc. CR
BCS badcmd
LDA (SCRATCH),Y
STA filename,X
INY
INX
CMP #13 \ =CR
BNE loop
:
\ if only CR then receiving
CPX #1
BNE docmd
LDA #DIR_RCV
STA dir
:
.docmd
LDA dir
CMP #DIR_RCV
BEQ dorcv
LDA peer
ORA peer+1
BEQ missingstn
JSR send
.done
RTS
:
.dorcv
JSR receive
JMP done
:
.badcmd
BRK
EQUB 253 \ =Bad string
EQUS "Filename too long"
EQUB 0
:
.badstn
BRK
EQUB 208 \ =Bad station number
EQUS "Bad station id"
EQUB 0
:
.missingstn
BRK
EQUB 208 \ =Bad station number
EQUS "Missing station id"
EQUB 0
:
.parsedec
\ Parse one byte decimal number.
\ Entry -
\   (SCRATCH)=addr of str,
\   Y=start offset
\ Exit  -
\   A=num,C=no data,V=>255,
\   SCRATCH+2 overwritten.
LDA #0
STA SCRATCH+2
.loop
LDA (SCRATCH),Y
JSR parsedecdig
BCS parsedecdone
\ store parsed digit
TAX
\ check total will not overflow
LDA SCRATCH+2
CMP #26 \ >=26 *10 => overflow
BCS parsedecover
\ multiple total so far by 10
ASL A
STA SCRATCH+2
ASL A
ASL A
ADC SCRATCH+2 \ we know C=0
STA SCRATCH+2
\ add this digit to total
TXA
ADC SCRATCH+2 \ we know C=0
BCS parsedecover \ >=255
STA SCRATCH+2
INY
JMP loop
:
.parsedecdone
LDA SCRATCH+2
CPY #0
BEQ parsedecerr \ =no digits
CLC \ =parsed digits
CLV \ =valid number
RTS
:
.parsedecerr
\ did not parse any characters
\ as a decimal number - return
\ error with C=1,V=0
SEC
CLV
RTS
:
.parsedecover
\ parsed number was >255 -
\ return overflow with V=1,C=0
LDA #&7F
ADC #1 \ => V=1,C=0
\ BIT P%+3 would set V from RTS opcode
RTS
:
.parsedecdig
CMP #ASC"0"
BCC parsedecdiginvsec
CMP #ASC"9"+1
BCS parsedecdiginv
SBC #ASC"0"-1 \ C=0 => ASC"0"
CLC \ =parsed digit
RTS
:
.parsedecdiginvsec
SEC \ =not digit
.parsedecdiginv
RTS
:
.helpmsg
EQUS "Econet File Transfer "+VERSION$
EQUB 13
EQUS "  Send - <stn. id.> <filename>"
EQUB 13
EQUS "  Recv - <stn. id.>|* (=<new filename>)"
EQUB 13
EQUB 0
:
\ --- SEND ---
:
.send
\ Entry-
\   peer=peer station,
\   filename=file to send
\ Exit - AXY=undefined
:
\ GET FILE INFORMATION
:
LDA #filename AND &FF
STA buffer
LDA #filename DIV &100
STA buffer+1
:
LDA #5 \ =read info for file
LDX #buffer AND &FF
LDY #buffer DIV &100
JSR OSFILE
CMP #1 \ =file found
BEQ sndfindleaf
\ not found
.errnotfound
BRK
EQUB 214 \ =Not found
EQUS "File not found"
EQUB 0
:
.sndfindleaf
\ print and copy leaf part of
\ filename into buffer for
\ transmission
:
LDA #filename AND &FF
STA SCRATCH
LDA #filename DIV &100
STA SCRATCH+1
:
\ find end of filename
LDX #0 \ index after last dot
LDY #0 \ current index
.loop
LDA (SCRATCH),Y
INY
CMP #13 \ =CR
BEQ sndcopyleaf
CMP #ASC"."
BNE loop
TYA \ save position after dot
TAX
JMP loop
:
.sndcopyleaf
TXA
PHA
JSR printme
\ copy and print leaf part of
\ filename
PLA
TAY
LDX #0 \ pos in leaf
.loop
LDA (SCRATCH),Y
STA buffer+18,X
INX
CMP #13 \ =CR
BEQ sndprintinfo
JSR OSASCI
INY
CPX #10
BCC loop
\ file >10 chars - truncate
LDA #13 \ =CR
STA buffer+18,X
:
.sndprintinfo
\ store len on stack
TXA
PHA
:
\ print destination station
LDA #ASC"-"
JSR OSASCI
LDA #ASC">"
JSR OSASCI
JSR printpeer
\ print attributes
JSR printinfo
:
\ BUILD + SEND FILE HEADER
:
\ populate buffer to send;
\ we can use the OSFILE param
\ block but just change the
\ first two bytes and append
\ the filename
:
LDA #OP_FILEINFO
STA buffer
LDA #CLI_PORT
STA buffer+1
:
\ build tx cblock
:
\ store size of buffer in cblock
\ and add start addr to get end
\ (size = op/port (2) + meta
\ data (16) + filename + CR)
PLA
CLC
ADC #(buffer+19) AND &FF
STA cblock+8 \ buffer end addr
LDA #(buffer+19) DIV &100
ADC #0
STA cblock+9
\ top bytes blanked below
:
\ store dest port
LDA #SRV_PORT
STA cblock+1
\ copy dest addr
LDA peer
STA cblock+2
LDA peer+1
STA cblock+3
:
\ put buffer addr in cblock
LDA #buffer AND &FF
STA cblock+4 \ buffer start addr
LDA #buffer DIV &100
STA cblock+5
\ never >64K so no need to do
\ carry - host pad addrs
LDA #&FF
STA cblock+6 \ start+2
STA cblock+7
STA cblock+10 \ end+2
STA cblock+11
:
\ do tx
LDX #cblock AND &FF
LDY #cblock DIV &100
JSR tx
TXA
BEQ sndopenin \ X=0-success
JMP neterror
:
\ PREPARE FOR TX FILE BLOCKS
:
.sndopenin
LDA #&40 \ =openin
LDX #filename AND &FF
LDY #filename DIV &100
JSR OSFIND
STA fhandle
TAX
BNE sndinitread
\ open in error
JMP errnotfound
:
.sndinitread
JSR initfilemeta
STA buffused \ word
STA buffused+1
:
\ SEND TRANSFER LOOP
:
.sndxfrloop
:
\ check if any bytes left in the
\ buffer after sending the
\ previous packet - if there
\ are, we just use those
LDA buffused
ORA buffused+1
BNE sndgetblkreq
:
\ buffer empty so read in
\ another block of maxxfr bytes
:
\ build OSGBPB block
:
LDA fhandle
STA buffer
:
\ buffer to read bytes from file
\ after OSGBPB param block at
\ buffer+13 (which leaves space
\ for block request rx + block
\ send tx, too)
LDA #(buffer+13) AND &FF
STA buffer+1
LDA #(buffer+13) DIV &100
STA buffer+2
\ max bytes to read (word) to
\ buffer+5
LDA #maxxfr AND &FF
STA buffer+5
LDA #maxxfr DIV &100
STA buffer+6
\ host pad addr
LDA #&FF
STA buffer+3 \ buffer addr+2
STA buffer+4
\ zero pad maxxfr
LDA #0
STA buffer+7 \ maxxfr addr+2
STA buffer+8
:
\ remaining bytes to buffer+9
LDY #3
.loop
LDA remain,Y
STA buffer+9,Y
DEY
BPL loop
:
\ min(maxxfr,remain) is bytes
\ to read
LDX #(buffer+5) AND &FF
LDY #(buffer+5) DIV &100
JSR mindbl \ => buffer+5
\ update buffused with bytes to
\ read; we assume the read will
\ be successful - if not, we
\ abort anyway (this field is
\ overwritten by the read)
LDY #3
.loop
LDA buffer+5,Y
STA buffused,Y
DEY
BPL loop
:
LDA #4 \ =read at current pos
LDX #buffer AND &FF
LDY #buffer DIV &100
JSR OSGBPB
BCC sndgetblkreq \ =success
\ error reading file
JSR cleanup
BRK
EQUB 189 \ =Access violation
EQUS "File read error"
EQUB 0
:
.sndgetblkreq
:
\ BLOCK REQUEST RX
:
JSR printcurrpos
:
\ check if there is anything
\ left to transfer
LDY #3
.loop
LDA remain,Y
BNE sndwaitblkreq \ <>0=more
DEY
BPL loop
:
.doneclose
\ finished transfer (also use
\ for receive)
:
\ close the file
JSR cleanup
LDY #0
.loop
LDA donemsg,Y
INY
JSR OSASCI
CMP #13
BNE loop
RTS
.donemsg
EQUS "Done"
EQUB 13 \ =CR
:
.sndwaitblkreq
\ set up rx cblock
LDA #CLI_PORT
STA cblock+2
\ copy sender addr
LDA peer
STA cblock+3
LDA peer+1
STA cblock+4
:
\ set start addr
LDA #buffer AND &FF
STA cblock+5
LDA #buffer DIV &100
STA cblock+6
\ set end addr - blkreq is
\ always 9 bytes
LDA #(buffer+9) AND &FF
STA cblock+9
LDA #(buffer+9) DIV &100
STA cblock+10
\ host pad addrs
LDA #&FF
STA cblock+7 \ start addr+2
STA cblock+8
STA cblock+11 \ end addr+2
STA cblock+12
:
LDX #cblock AND &FF
LDY #cblock DIV &100
JSR rx
TXA
BMI sndchkblkreqpkt \ X[7]=OK
\ no block request received
JSR cleanup
BRK
EQUB 160+5 \ =No reply from station
EQUS "No reply from dest"
EQUB 0
:
.sndchkblkreqpkt
\ check is block request pkt
LDA buffer
CMP #OP_BLKREQ
BEQ sndblkreqrcv
\ incorrect packet operation - data
\ or other block rxd when header
\ expected
JSR cleanup
BRK
EQUB 217 \ =CFS Header?
EQUS "Not a block send"
EQUB 0
:
.sndblkreqrcv
\ end-start=bytes received
LDX #(cblock+5) AND &FF
LDY #(cblock+5) DIV &100
JSR sbcdblsec \ => cblock+5
\ confirm size=9
LDA #9
STA cblock+9
LDA #0
STA cblock+10
STA cblock+11
STA cblock+12
LDX #(cblock+5) AND &FF
LDY #(cblock+5) DIV &100
JSR cmpdbl
BEQ sndcalcxfr
\ size<>9
JSR cleanup
BRK
EQUB 169 \ =Block too big
EQUS "Block too big"
EQUB 0
:
.sndcalcxfr
\ bytes to transfer is
\ min(buffused,maxxfr); buffused
\ is left in buffer+5, above
LDA buffused
STA buffer+9
LDA buffused+1
STA buffer+10
\ zero pad buffused
LDA #0
STA buffer+11
STA buffer+12
:
LDX #(buffer+5) AND &FF
LDY #(buffer+5) DIV &100
JSR mindbl \ => buffer+5
\ copy bytes to transfer to end
\ addr (we will add start addr
\ later)
LDY #3
.loop
LDA buffer+5,Y
STA cblock+8,Y
DEY
BPL loop
:
\ we update remain, currpos and
\ buffused before we actually do
\ the transmission as they're in
\ handy places
:
\ update bytes remaining to be
\ transferred
LDY #3
.loop
LDA remain,Y
STA buffer+9,Y
DEY
BPL loop
\ do subtraction
LDX #(buffer+5) AND &FF
LDY #(buffer+5) DIV &100
JSR sbcdblsec \ => buffer+5
LDY #3
.loop
LDA buffer+5,Y
STA remain,Y
DEY
BPL loop
:
\ copy expected pos into
\ buffer+5 and compare with
\ recv'd
LDY #3
.loop
LDA currpos,Y
STA buffer+5,Y
DEY
BPL loop
LDX #(buffer+1) AND &FF
LDY #(buffer+1) DIV &100
JSR cmpdbl
BEQ sndupdcurrpos \ =same
\ offset mismatch - block num not one
\ expected
JSR cleanup
BRK
EQUB 218 \ =CFS Block?
EQUS "Block out of sequence"
EQUB 0
:
.sndupdcurrpos
\ calculate new currpos
\ (buffer+5 = currpos)
\ bytes to be transferred to
\ buffer+9
LDA cblock+8
STA buffer+9
LDA cblock+9
STA buffer+10
\ zero pad bytes transferred
LDA #0
STA buffer+11
STA buffer+12
\ do addition
LDX #(buffer+5) AND &FF
LDY #(buffer+5) DIV &100
JSR adcdblclc \ => buffer+9
\ update current position
LDY #3
.loop
LDA buffer+9,Y
STA currpos,Y
DEY
BPL loop
:
\ update bytes left in buffer
SEC
LDA buffused
SBC cblock+8
STA buffused
LDA buffused+1
SBC cblock+9
STA buffused+1
:
\ save bytes being transferred
\ in buffer+5 so we can shuffle
\ the buffer memory later
LDA cblock+8
STA buffer+5
LDA cblock+9
STA buffer+6
:
\ build tx cblock
:
\ calculate start and end addrs
:
\ add size of header (5 bytes)
\ to len (cblock+8 contains len)
CLC
LDA cblock+8
ADC #5
STA cblock+8
LDA cblock+9
ADC #0
STA cblock+9
\ zero pad size (adcdbl will
\ set top bytes to &FF)
LDA #0
STA cblock+10
STA cblock+11
:
\ buffer start address
LDA #(buffer+8) AND &FF
STA cblock+4
LDA #(buffer+8) DIV &100
STA cblock+5
\ host pad addr
LDA #&FF
STA cblock+6
STA cblock+7
:
\ add to end address
LDX #(cblock+4) AND &FF
LDY #(cblock+4) DIV &100
JSR adcdblclc \ => cblock+8
:
\ store block type in buffer
LDA #OP_BLKSND
STA buffer+8
\ store offset at buffer+9 (just
\ before data read by OSGBPB at
\ buffer+13); use buffer+1 as
\ currpos has been updated
LDY #3
.loop
LDA buffer+1,Y
STA buffer+9,Y
DEY
BPL loop
:
\ store dest port
LDA #SRV_PORT
STA cblock+1
\ copy dest addr
LDA peer
STA cblock+2
LDA peer+1
STA cblock+3
:
LDX #cblock AND &FF
LDY #cblock DIV &100
JSR tx
TXA
BEQ sndshuffchk \ X=0-success
JMP neterror
:
.sndshuffchk
\ shuffle the untransmitted data
\ in the buffer to the start
\
\ we know the addrs here are
\ 16-bit so only use 2 bytes
:
\ skip this if we transferred
\ the entire buffer and no
\ shuffling required
LDA buffused
ORA buffused+1
BNE sndshuffbuff256
.sndjmpxfrloop
JMP sndxfrloop
:
.sndshuffbuff256
\ calculate the buffer src addr
\ (start after header + bytes
\ transferred) into SCRATCH+0/1
LDA #ASC":":JSR OSASCI
CLC
LDA #(buffer+13) AND &FF
ADC buffer+5
STA SCRATCH
LDA #(buffer+13) DIV &100
ADC buffer+6
STA SCRATCH+1
:
\ set the buffer dst addr
\ (start after header) in
\ SCRATCH+2/3
LDA #(buffer+13) AND &FF
STA SCRATCH+2
LDA #(buffer+13) DIV &100
STA SCRATCH+3
:
\ move the blocks of 256 bytes
\ (SCRATCH+0/1)->(SCRATCH+2/3)
LDX buffused+1
BEQ shuffbuff1
LDY #0
.loop
LDA (SCRATCH),Y
STA (SCRATCH+2),Y
INY
BNE loop
INC SCRATCH+1
INC SCRATCH+3
DEX
BNE loop
:
.shuffbuff1
\ check there is still <256 to
\ move
LDX buffused
BEQ sndjmpxfrloop \ no
LDY #0
.loop
LDA (SCRATCH),Y
STA (SCRATCH+2),Y
INY
DEX
BNE loop
JMP sndxfrloop
:
\ --- RECEIVE ---
:
.receive
\ Entry-
\   peer=peer station,
\   filename=file to receive
\     (empty=use sent name)
\ Exit - AXY=undefined
:
\ print receive name+station
:
JSR printme
LDY #0
.loop
LDA filename,Y
CMP #13
BEQ rcvprintpeer
JSR OSASCI
INY
JMP loop
:
.rcvprintpeer
LDA #ASC"<"
JSR OSASCI
LDA #ASC"-"
JSR OSASCI
\ print * instead of 0 for any
LDA peer
ORA peer+1
BEQ rcvpeerwild
JSR printpeer
JMP rcvbuildrxinfo
.rcvpeerwild
LDA #ASC"*"
JSR OSASCI
LDA #ASC":"
JSR OSASCI
:
.rcvbuildrxinfo
\ build RX cblock
:
LDA #SRV_PORT
STA cblock+2
LDA peer
STA cblock+3
LDA peer+1
STA cblock+4
:
\ buffer start
LDA #buffer AND &FF
STA cblock+5
LDA #buffer DIV &100
STA cblock+6
\ buffer end - max is 29 (18
\ op/port/load/exec/len/attr +
\ filename (10) + CR)
LDA #(buffer+29) AND &FF
STA cblock+9
LDA #(buffer+29) DIV &100
STA cblock+10
\ host pad addrs
LDA #&FF
STA cblock+7
STA cblock+8
STA cblock+11
STA cblock+12
:
LDX #cblock AND &FF
LDY #cblock DIV &100
JSR rx
TXA
BMI rcvchkinfopkt \ X[7]=OK
BRK
EQUB 160+5 \ =No reply from station
EQUS "No transmission received"
EQUB 0
:
.rcvchkinfopkt
\ check packet type
LDA buffer
CMP #OP_FILEINFO
BEQ rcvsaveinfo
\ incorrect packet operation
BRK
EQUB 217 \ =CFS Header?
EQUS "Not file info block"
EQUB 0
:
.rcvsaveinfo
\ if peer was * record this
LDA peer
ORA peer+1
TAX
\ save peer details
LDA buffer+1
STA port
LDA cblock+3
STA peer
LDA cblock+4
STA peer+1
:
CPX #0
BNE rcvstorefname
\ backspace over "*-colon"
LDA #8
JSR OSASCI
JSR OSASCI
JSR printpeer
:
.rcvstorefname
\ store address of override
\ filename for OSFILE
LDA #filename AND &FF
STA buffer
LDA #filename DIV &100
STA buffer+1
:
\ check if overriding filename
LDA filename
CMP #13 \ =CR
BNE rcvcheckname \ no
\ replace OSFILE param with addr
\ of received filename
LDA #(buffer+18) AND &FF
STA buffer
LDA #(buffer+18) DIV &100
STA buffer+1
:
.rcvcheckname
\ check name is (vaguely) valid
\ and print
LDY #0
.loop
LDA buffer+18,Y
CMP #13
BEQ rcvprintinfo
CMP #32
BCC rcvinvalidname
CMP #127
BCS rcvinvalidname
JSR OSASCI
INY
CPY #11 \ =max length+1
BCC loop
.rcvinvalidname
BRK
EQUB 204 \ =Bad filename
EQUS "Bad filename"
EQUB 0
:
.rcvprintinfo
JSR printinfo
:
\ store currpos + remain
JSR initfilemeta
:
\ CREATE FILE WITH INFO
:
\ start+end addrs = 0 => empty
LDA #0
LDY #7
.loop
STA buffer+10,Y
DEY
BPL loop
:
LDA #0 \ =save
LDX #buffer AND &FF
LDY #buffer DIV &100
JSR OSFILE
:
\ open file for update (keeping
\ info)
LDA #&C0 \ =openup
LDX buffer
LDY buffer+1
JSR OSFIND
TAY
BNE rcvopenoutok
BRK
EQUB 193 \ =File not writable
EQUS "Can't save file"
EQUB 0
:
.rcvopenoutok
STA fhandle
:
\ RECEIVE TRANSFER LOOP
:
.rcvxfrloop
JSR printcurrpos
:
\ if nothing left to transfer,
\ we're done
LDY #3
.loop
LDA remain,Y
BNE rcvblkreq
DEY
BPL loop
JMP doneclose
:
\ build block request
:
.rcvblkreq
LDA #OP_BLKREQ
STA buffer
LDY #3
.loop
LDA currpos,Y
STA buffer+1,Y
DEY
BPL loop
:
\ we always request maxxfr even
\ if less remains - we check
\ when we receive it's not over
LDA #maxxfr AND &FF
STA buffer+5
LDA #maxxfr DIV &100
STA buffer+6
\ zero pad maxxfr
LDA #0
STA buffer+7
STA buffer+8
:
\ build block request cblock
:
LDA port
STA cblock+1
LDA peer
STA cblock+2
LDA peer+1
STA cblock+3
:
\ block request is 9 bytes long
LDA #buffer AND &FF
STA cblock+4
LDA #buffer DIV &100
STA cblock+5
LDA #(buffer+9) AND &FF
STA cblock+8
LDA #(buffer+9) DIV &100
STA cblock+9
\ host pad addrs
LDA #&FF
STA cblock+6 \ start addr+2
STA cblock+7
STA cblock+10 \ end addr+2
STA cblock+11
:
LDX #cblock AND &FF
LDY #cblock DIV &100
JSR tx
TXA
BEQ rcvgetblksnd \ X=0-success
JMP neterror
:
.rcvgetblksnd
\ build block send rx cblock
LDA #SRV_PORT
STA cblock+2
LDA peer
STA cblock+3
LDA peer+1
STA cblock+4
:
\ get to buffer+8 so we can put
\ a OSGBPB param block in front
LDA #(buffer+8) AND &FF
STA cblock+5
LDA #(buffer+8) DIV &100
STA cblock+6
LDA #(buffer+8+5+maxxfr) AND &FF
STA cblock+9
LDA #(buffer+8+5+maxxfr) DIV &100
STA cblock+10
\ host pad addrs
LDA #&FF
STA cblock+7 \ start addr+2
STA cblock+8
STA cblock+11 \ end addr+2
STA cblock+12
:
LDX #cblock AND &FF
LDY #cblock DIV &100
JSR rx
TXA
BMI rcvchkblksndpkt \ X[7]=OK
JSR cleanup
BRK
EQUB 160+2 \ =Station not listening
EQUS "Block send timeout"
EQUB 0
:
.rcvchkblksndpkt
\ check is block send packet
LDA buffer+8
CMP #OP_BLKSND
BEQ rcvchkblksndpos
\ incorrect packet operation -
\ expecting header block
JSR cleanup
BRK
EQUB 217 \ =CFS Header?
EQUS "Block send?"
EQUB 0
:
.rcvchkblksndpos
\ check pos in block matches our
\ currpos
LDY #3
.loop
LDA currpos,Y
STA buffer+5,Y
DEY
BPL loop
LDX #(buffer+5) AND &FF
LDY #(buffer+5) DIV &100
JSR cmpdbl
BEQ rcvchkblksndlen \ yes
\ not expected block number
JSR cleanup
BRK
EQUB 218 \ =CFS Block?
EQUS "Block out of sequence"
EQUB 0
:
.rcvchkblksndlen
\ calculate bytes received
\ based on end-start
LDX #(cblock+5) AND &FF
LDY #(cblock+5) DIV &100
JSR sbcdblsec \ => cblock+5
\ minus the 5 bytes for the
\ header => block size
SEC
LDA cblock+5
SBC #5
STA cblock+5
LDA cblock+6
SBC #0
STA cblock+6
:
\ check is less than remain
LDY #3
.loop
LDA remain,Y
STA cblock+9,Y
DEY
BPL loop
LDX #(cblock+5) AND &FF
LDY #(cblock+5) DIV &100
JSR cmpdbl
BCS rcvblksndok \ yes
JSR cleanup
BRK
EQUB 160+9 \ =Too long
EQUS "Block too big"
EQUB 0
:
.rcvblksndok
\ block position and len are OK
\ so write the output file
LDA fhandle
STA buffer
\ start addr
LDA #(buffer+13) AND &FF
STA buffer+1
LDA #(buffer+13) DIV &100
STA buffer+2
\ host pad addrs
LDA #&FF
STA buffer+3 \ start addr+2
STA buffer+4
\ number of bytes
LDA cblock+5
STA buffer+5
LDA cblock+6
STA buffer+6
\ zero pad size
LDA #0
STA buffer+7 \ bytes+2
STA buffer+8
:
LDA #2 \ =append
LDX #buffer AND &FF
LDY #buffer DIV &100
JSR OSGBPB
BCC rcvupdcurrpos \ OK
JSR cleanup
BRK
EQUB 193 \ =Can't write to file
EQUS "Write error"
EQUB 0
:
.rcvupdcurrpos
\ add packet length to currpos
LDY #3
.loop
LDA currpos,Y
STA cblock+9,Y
DEY
BPL loop
LDX #(cblock+5) AND &FF
LDY #(cblock+5) DIV &100
JSR adcdblclc \ => cblock+9
LDY #3
.loop
LDA cblock+9,Y
STA currpos,Y
DEY
BPL loop
:
\ subtract len from remain
LDY #3
.loop
LDA remain,Y
STA cblock+9,Y
DEY
BPL loop
LDX #(cblock+5) AND &FF
LDY #(cblock+5) DIV &100
JSR sbcdblsec \ => cblock+1
LDY #3
.loop
LDA cblock+5,Y
STA remain,Y
DEY
BPL loop
:
\ go round for next block
JMP rcvxfrloop
:
\ UTILITY ROUTINES
:
.cleanup
LDA #0 \ =close
LDY fhandle
JSR OSFIND
RTS
:
.neterror
\ calculate offset of this error
\ in the message addr table
STX errorcode
LDX errorcode
CPX #&40
BEQ linejamerr
CPX #&41
BEQ handshkerr
CPX #&42
BEQ noscouterr
CPX #&43
BEQ noclockerr
CPX #&44
BEQ badtxblkerr
BRK
EQUB 160+1 \ =Net error
EQUS "Unknown net error"
EQUB 0
.linejamerr
BRK
EQUB 160+0 \ =Line jammed
EQUS "Line jammed"
EQUB 0
.handshkerr
BRK
EQUB 160+1 \ =Net error
EQUS "Net error"
EQUB 0
.noscouterr
BRK
EQUB 160+2 \ =Station not listening
EQUS "Not listening"
EQUB 0
.noclockerr
BRK
EQUB 160+3 \ =No clock
EQUS "No clock"
EQUB 0
.badtxblkerr
BRK
EQUB 160+4 \ =Station not present
EQUS "Bad control block"
EQUB 0
:
.printinfo
\ Print file info - header is
\ assumed to be in the buffer.
:
\ space
LDA #ASC" "
JSR OSASCI
\ load addr
LDA #1
LDX #(buffer+2) AND &FF
LDY #(buffer+2) DIV &100
JSR wrdbl0 \ leading 0s
\ space
LDA #ASC" "
JSR OSASCI
\ exec addr
LDA #1
LDX #(buffer+6) AND &FF
LDY #(buffer+6) DIV &100
JSR wrdbl0 \ leading 0s
\ space
LDA #ASC" "
JSR OSASCI
\ len
LDX #(buffer+10) AND &FF
LDY #(buffer+10) DIV &100
JSR wrdbl \ no leading 0s
JMP OSNEWL \ JMP>RTS
:
.printcurrpos
\ Print current pos in transfer.
LDA #13
JSR OSWRCH \ CR but not LF
LDX #currpos AND &FF
LDY #currpos DIV &100
JSR wrdbl
LDA #ASC" "
JMP OSASCI \ JMP>RTS
:
.printme
\ Print my station number
\ followed by colon.
:
\ get station number
LDA #8 \ =read station number
STA buffer
LDA #&13 \ =station information
LDX #buffer AND &FF
LDY #buffer DIV &100
JSR OSWORD
:
\ print station number
LDA buffer+1
JSR wrdec
LDA #ASC":"
JMP OSASCI \ JMP>RTS
:
.printpeer
\ Print peer address + colon.
LDA peer+1
BEQ printpeerskipnet
JSR wrdec
LDA #ASC"."
JSR OSASCI
.printpeerskipnet
LDA peer
JSR wrdec
LDA #ASC":"
JMP OSASCI \ JMP>RTS
:
.initfilemeta
\ Store length from OSFILE param
\ block as remain and initialise
\ currpos to 0.
\ Exit - A=0
LDY #3
.loop
LDA buffer+10,Y
STA remain,Y
DEY
BPL loop
:
LDA #0
STA currpos \ double
STA currpos+1
STA currpos+2
STA currpos+3
RTS
:
.wrdbl
\ As wrdbl0 but sets A=0 first.
LDA #0
\
.wrdbl0
\ Write 32-bit double in hex.
\ Entry-
\   YX=double addr,
\   A=0/1 strip/print leading 0s
\ Exit -
\   AXY undefined
LSR A \ A->C
LDA SCRATCH
PHA
LDA SCRATCH+1
PHA
STX SCRATCH
STY SCRATCH+1
LDA #0 \ recover C->A
ROL A
TAX \ leading 0s flag
LDY #3 \ byte #; start at MSB
.loop
LDA (SCRATCH),Y
BNE wrdblhex \ <>0 - write
CPX #0 \ leading zeroes?
BNE wrdblhex \ no - write
CPY #0 \ last digit?
BNE skipwrdblhex \ no - skip
.wrdblhex
JSR wrbyte
INX \ set not in leading zeros
.skipwrdblhex
DEY \ move to next byte MSB->LSB
BPL loop
PLA
STA SCRATCH+1
PLA
STA SCRATCH
RTS
:
.wrbyte
\ Write a single hex byte.
\ Entry- A=byte
\ Exit - AXY preserved
PHA
LSR A \ shift high nibble to low
LSR A
LSR A
LSR A
JSR wrnibble
PLA
PHA
AND #&0F \ get low nibble
JSR wrnibble
PLA
RTS
:
.wrnibble
\ Write a single hex digit.
\ Entry- A[0-3]=nibble,
\         [4-7]=must be 0
\ Exit - AXY undefined
PHP
SED
CMP #10 \ C=(>=&A)
ADC #ASC"0" \ C=>+&10=>"ABCDEF"
PLP
JMP OSASCI \ JMP>RTS
:
.wrdecxy
PHA
TXA
PHA
TYA
PHA
TSX
LDA STACK+3,X
JSR wrdec
PLA
TAY
PLA
TAX
PLA
RTS
:
.wrdec
\ As wrdec0 but sets X=0.
LDX #0
:
.wrdec0
\ Write decimal digit in A
\ Entry-
\   A=value,
\   X=0/1 strip/print leading 0s
\ Exit -
\   A unchanged,XY undefined
PHA
SEC
LDX #0 \ in leading 0s
LDY #&FF
.loop
INY
SBC #100
BCS loop
JSR wrdecdigit
CLC
ADC #100
LDY #&FF
.loop
INY
SBC #10
BCS loop
JSR wrdecdigit
CLC
ADC #10+ASC"0"
JSR OSASCI
PLA
RTS
:
.wrdecdigit
PHA
TYA
BNE wrdecdigitdo
CPX #0
BEQ skipdecdigit
.wrdecdigitdo
ORA #ASC"0"
JSR OSASCI
INX
.skipdecdigit
PLA
RTS
:
\ --- TX ---
:
.tx
\ Transmit an Econet packet;
\ wrapper around OSWORD &10 but
\ handles polling transmission.
\ Entry-
\   YX=cblock addr,
\   cblock as OSWORD except +0
\   will be initialised.
\ Exit -
\   X=0-success else err#
\   SCRATCH+0/1 overwritten.
:
\ XY address in scratch
STX SCRATCH
STY SCRATCH+1
:
\ calculate timeout
LDA #TXTIMEOUT AND &FF
STA timeout
LDA #(TXTIMEOUT AND &FF00) DIV &100
STA timeout+1
\ timeout < 655.35s so +2/3/4=0
LDA #0
STA timeout+2
STA timeout+3
STA timeout+4
JSR set_timeout
:
.tx_start
LDA #&80 \ LSb=not started
LDY #0
STA (SCRATCH),Y
LDA #&10 \ =transmit
LDX SCRATCH
LDY SCRATCH+1
JSR OSWORD
LDY #0
LDA (SCRATCH),Y
BEQ tx_start
:
.tx_poll
\ poll for completion
LDA #&32 \ =poll transmit
JSR OSBYTE
TXA
BMI tx_poll
CPX #&41 \ network error
BEQ tx_retry_check
CPX #&42 \ not listening
BEQ tx_retry_check
\ either success or fatal error
RTS
:
.tx_retry_check
PHA
JSR chk_timeout
PLA
BCC tx_start \ retry TX
\ timed out
TAX \ reply in X
RTS
:
\ --- RX ---
:
.rx
\ Receive an Econet packet;
\ wrapper around OSWORD &11 but
\ handles polling, timeout and
\ read or delete.
\ Entry-
\   YX=cblock addr
\   cblock as OSWORD except +0/1
\   will be initialised.
\ Exit-
\   X[7]=success,
\   SCRATCH+0/1 overwritten.
:
\ XY address in scratch
STX SCRATCH
STY SCRATCH+1
:
LDA #0
LDY #0
STA (SCRATCH),Y \ for cblock num
LDA #&7F \ for control byte
INY
STA (SCRATCH),Y
LDA #&11 \ =receive
\ X=SCRATCH, above
LDY SCRATCH+1
JSR OSWORD
:
\ calculate timeout
LDA #RXTIMEOUT AND &FF
STA timeout
LDA #(RXTIMEOUT AND &FF00) DIV &100
STA timeout+1
\ timeout < 655.35s so +2/3/4=0
LDA #0
STA timeout+2
STA timeout+3
STA timeout+4
JSR set_timeout
:
.rx_poll
\ poll for reception
LDY #0
LDA (SCRATCH),Y
TAX
LDA #&33 \ =poll receive
JSR OSBYTE
TXA
BMI rx_read
:
\ no data received
JSR chk_timeout
BCC rx_poll \ retry poll
\ timed out
LDY #0
LDA (SCRATCH),Y
TAX
LDA #&34 \ =delete RX block
JSR OSBYTE
LDX #0 \ !MSb => not received
RTS
:
.rx_read
\ received message
LDA #&11 \ =read RX block
LDX SCRATCH
LDY SCRATCH+1
JSR OSWORD
LDX #&80 \ MSb => received
RTS
:
.get_time
\ Get interval timer into
\ buffer.
\ Exit  - AXY undefined
LDA #3 \ =read interval timer
LDX #now AND &FF
LDY #now DIV &100
JMP OSWORD \ JMP>RTS
:
.set_timeout
\ Set timeout to now + length of
\ timeout in timeout buffer.
\ Entry-
\   Timeout len in timeout
\   buffer.
\ Exit _
\   AXY undefined,
\   now buffer overwritten and
\   timeout buffer updated to
\   timeout len + now.
JSR get_time
CLC
LDY #0
PHP
.loop
PLP
LDA now,Y
ADC timeout,Y
STA timeout,Y
PHP
INY
CPY #5
BNE loop
PLP
RTS
:
.chk_timeout
\ Check if timeout (set by
\ set_timeout) has been reached.
\ Entry- none
\ Exit -
\   C=timeout reached,
\   AXY undefined
JSR get_time
LDY #4
.loop
LDA now,Y
CMP timeout,Y
\ if not same, stop here - C
\ will indicate if reached
BNE timeout_checked
DEY
BPL loop
.timeout_checked
RTS
:
.adcdblclc
\ As adcdbl but sets C=0 first.
CLC
.adcdbl
\ Add 32-bit doubles Q=Q+P
\ Entry-
\   YX=block addr,C=carry
\   block+0-3=P,+4-7=Q
\ Exit  -
\   AXY=undefined,CZN=as ADC,
\   block+0-3 unchanged,
\        +4-7=Q+P,
\   SCRATCH+0/1 overwritten.
STX SCRATCH
STY SCRATCH+1
LDY #4
.loop
LDA (SCRATCH),Y get byte in Q
DEY \ move to same byte in P
DEY
DEY
DEY
ADC (SCRATCH),Y
PHP
INY \ back to same byte in Q
INY
INY
INY
STA (SCRATCH),Y
CPY #7 \ finished
BEQ adcdbldone
INY \ move to next byte in Q
PLP
JMP loop
.adcdbldone
PLP
RTS
:
.sbcdblsec
\ As sbcdbl but sets C=1 (= no
\ borrow).
SEC
.sbcdbl
\ Subtract 32-bit doubles P=Q-P
\ Entry-
\   YX=block addr,C=1-borrow
\   block+0-3=P,+4-7=Q
\ Exit -
\   AXY undefined,CZN=as SBC,
\   block+0-3=Q-P,
\        +4-7 unchanged
\   SCRATCH+0/1 overwritten.
STX SCRATCH
STY SCRATCH+1
LDY #4
.loop
LDA (SCRATCH),Y \ get byte in Q
DEY \ move to same byte in P
DEY
DEY
DEY
SBC (SCRATCH),Y
STA (SCRATCH),Y
PHP \ flags for iter or return
CPY #3 \ finished
BEQ sbcdbldone
INY \ move to next byte in Q
INY
INY
INY
INY
PLP
JMP loop
.sbcdbldone
PLP
RTS
:
.cmpdbl
\ Compare 32-bit doubles Q-P
\ Entry-
\   YX=block addr,
\   block+0-3=P,+4-7=Q
\ Exit -
\   AXY undefined,CZN=as CMP
\   Overwrites SCRATCH+0/1.
STX SCRATCH
STY SCRATCH+1
CLC
LDY #7
.loop
LDA (SCRATCH),Y
DEY
DEY
DEY
DEY
BEQ cmpdbllast
CMP (SCRATCH),Y
BNE cmpdbldone
INY
INY
INY
JMP loop
.cmpdbllast
CMP (SCRATCH),Y
.cmpdbldone
RTS
:
.mindbl
\ Minimum of 32-bit doubles P,Q
\ Entry-
\   YX=block addr,
\   block+0-3=P,+4-7=Q
\ Exit -
\   AXY undefined,
\   block+0-3=min(P,Q)
\   Overwrites scratch.
JSR cmpdbl
BCS mindbldone
LDY #7
.loop
LDA (SCRATCH),Y
DEY \ move to same byte in P
DEY
DEY
DEY
STA (SCRATCH),Y
BEQ mindbldone
INY
INY
INY
BNE loop \ Z<>0 => BRA
.mindbldone
RTS
:
.end
:
\ --- variable storage ---
:
.dir
\ transfer direction - see DIR_X
EQUB 0
:
.fhandle
EQUB 0
:
.errorcode
EQUB 0
:
.peer
EQUW 0 \ stn.net
:
.port
EQUB 0 \ client port
:
.currpos
\ bytes transferred so far =>
\ offset of next byte
EQUD 0
:
.remain
\ remaining bytes to transfer
EQUD 0
:
.buffused
\ bytes of data in buffer
\ (typically starting at
\ buffer+13)
EQUW 0
:
.now
\ get_time fetches timer to here
EQUB 0
EQUB 0
EQUB 0
EQUB 0
EQUB 0
.timeout
\ expiry of timeout stored here
EQUB 0
EQUB 0
EQUB 0
EQUB 0
EQUB 0
]
:
REM filename buffer
filename=FNasmalloc(MAXFNAMELEN)
:
REM file/packet buffer
buffer=FNasmalloc(buflen)
:
REM cblock buffer
cblock=FNasmalloc(13)
:
REM this test is shakey if the
REM code block has overrun
REM following variables
IF P%-target%>codebuf% THEN PRINT "Code overran target buffer: ";P%-code%;">";codebuf%;" bytes":STOP
NEXT
:
PRINT "Assembled &";~target%;"+";~end-target%;"/";~P%-target%;" @ &";~code%
targethost%=&FFFF0000 OR target%
starthost%=&FFFF0000 OR start
save$="SAVE EcoXfr "+STR$~code%+"+"+STR$~(end-target%)+" "+STR$~starthost%+" "+STR$~targethost%
PRINT "*";save$
OSCLI(save$)
ENDPROC
:
DEFFNasmalloc(bytes%)
LOCAL addr%
addr%=P%
P%=P%+bytes%
O%=O%+bytes%
=addr%
